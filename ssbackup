#!/usr/bin/env bash

tar_newer=""
ext="ful"

my_name=`basename $0`
real_name=$(basename `realpath $0`)
install_dir=$(dirname `realpath $0`)

if [[ $my_name =~ inc ]]; then
    ext="inc"
fi
for i; do # loop over cmdline args
    [[ $debug ]] && echo $i
    if [ "X$i" == "X-h" ]; then
	echo "Usage:"
	echo ""
	echo "$real_name [-h] [-v] [inc] [test] [reference]"
	echo ""
	echo "-h: print help text and exit"
	echo "-v: increase verbosity (debug output)"
	echo "inc: perform incremental backup relative to last succesful (default full backup)"
	echo "test: run preamble tests and exit (no filesystem changes)"
	echo "reference: perform incremental backup relative to this file's date"
	echo ""
	echo "launching from a symlink that contains 'inc' also triggers an incremental backup"
	echo "this allows a setup like:"
	echo "/etc/cron.daily/backup_inc -> ~/bin/ssbackup*"
	echo "/etc/cron.monthly/backup -> ~/bin/ssbackup*"
	echo "to run monthly full and daily incremental backups automatically"
	exit 0
    elif [ "X$i" == "X-v" ]; then
	debug=1
    elif [ -f "$i" ]; then
	ext="inc"
	ref="$i"
    elif [ "$i" == "inc" ]; then
	ext="inc"
    elif [ "$i" == "test" ]; then
	test=1
    fi
done

[[ $debug ]] && echo $my_name
[[ $debug ]] && echo $install_dir
. $install_dir/config
[[ $debug ]] && echo $exclude_dirs

if [ ! -d "$target_drive" ]; then
    echo "ERROR: no backup drive:" $target_drive
    [[ $test ]] || exit -1 # exit unless we're only testing
fi
if [ ! -w "$target_dir" ]; then
    echo "ERROR: no backup directory, or not writable:" $target_dir
    [[ $test ]] || exit -1 # exit unless we're only testing
fi

if [ "$ext" == "inc" ]; then
    if [ "$ref" == "" ]; then
	# get latest succesful backup
	ref_dir=$(dirname `\ls -t "$target_dir"/*/BACKUP_COMPLETE | head -1`)
	ref=`\ls $ref_dir/*.exclude_list`
    fi
    echo "Making incremental backup relative to $ref"
    tar_newer=" --newer=$ref "
else
    echo "Making full backup"
fi

pigz=`which pigz`
if [ $pigz == '' ]; then
    compress="-z"
else
    echo "Using parallel compression through" $pigz
    compress="--use-compress-program=pigz"
fi

backup_name=`date +%F_%H.%M.%S`"."`hostname`
backup_dir="$target_dir/$backup_name.$ext"
if [ -x "$backup_dir" ]; then
    echo "ERROR: backup dir exists:" $backup_dir
    [[ $test ]] || exit -1 # exit unless we're only testing
fi

if [ $test ]; then 
    echo "only TESTING -- exit now"
    exit
fi

mkdir "$backup_dir"
if [ ! -d "$backup_dir" ]; then
    echo "ERROR: could not create backup dir:" $backup_dir
    exit -1
fi

echo "Starting backup to" $backup_dir
\df -h --output=target,size,used,avail,pcent "$target_drive"

backup_file="$backup_dir"/files.tar.gz
excl_file="$backup_dir"/$backup_name.exclude_list
log_file="$backup_dir"/$backup_name.log
err_file="$backup_dir"/$backup_name.err

echo "Generating exclude list" $excl_file
cmd_excl_prune=$( for i in $exclude_prune; do echo "-ipath $i -prune"; done )
cmd_excl_dirs=$( for i in $exclude_dirs; do echo "-o -iname $i -prune"; done )
cmd_excl_files=$( for i in $exclude_files; do echo "-o -iname $i"; done )
cmd_excl_paths=$( for i in $exclude_paths; do echo "-o -ipath $i"; done )

[[ $debug ]] && echo $include_dirs
[[ $debug ]] && echo $cmd_excl_prune
[[ $debug ]] && echo $cmd_excl_dirs
[[ $debug ]] && echo $cmd_excl_files
[[ $debug ]] && echo $cmd_excl_paths

find $include_dirs -xdev $cmd_excl_prune -o \
     -type d \( -false $cmd_excl_dirs \) -o \
     -type f \( -false $cmd_excl_files \) -o \
     -false $cmd_excl_paths >  "$excl_file"

ls -l "$excl_file"

echo "Starting tar backup process"
[[ $debug ]] && echo compress "$compress"
[[ $debug ]] && echo newer "$tar_newer"

tar $compress --one-file-system $tar_newer -c -v -v -f "$backup_file" \
    --exclude-from="$excl_file" \
    $include_dirs \
    2> "$err_file" 1> "$log_file"
exit_val=$?

if [ $exit_val -lt 2 ]; then 
    echo "Backup completed successfully!"
    touch "$backup_dir/BACKUP_COMPLETE"
else
    echo "Backup failed!"
    touch "$backup_dir/BACKUP_FAIL"
fi
if [ "$log_dir" != "" ]; then
    if [ ! -d "$log_dir" ]; then
	echo "Warning local log dir does not exist, not copying"
    else
	# local dir *does* exist
	my_log_dir="$log_dir/"$backup_name
	if [ -x "$my_log_dir" ]; then
	    echo "Warning local logdir already exists:" $my_log_dir
	    ls -lh "$my_log_dir"
	fi
	mkdir "$my_log_dir"
	echo "Copying error and log files and backup status for local reference"
	cp "$err_file" "$log_file" "$backup_dir/BACKUP_"* "$my_log_dir"
	ls -lh "$my_log_dir"
    fi
fi


ls -lh "$backup_dir"
\df -h --output=target,size,used,avail,pcent "$target_drive"

exit $exit_val
