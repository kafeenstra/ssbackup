#!/usr/bin/env bash

target_drive="/media/feenstra/Feenstra_VU_Back"
target_dir="$target_drive/Backupset2"

include_dirs="/ /home"
exclude_prune="/var /tmp"
exclude_dirs=".gvfs .thumbnails .trash .cache lock .tmp tmp .dropbox .git imapmail indexeddb"
exclude_files="windows\*.vdi"
exclude_paths="/var */recordings*/*.mp4 */Camera*/*.mp4"

tar_newer=""
ext="ful"

my_name=`basename $0`

if [ -f "$1" ]; then
    echo "Making incremental backup relative to $1"
    tar_newer=" --newer=$1 "
    ext="inc"
elif [ "$1" == "inc" ] || [ $my_name == "backup_inc" ]; then
    echo "Making incremental backup"
    ref_dir=$(dirname `\ls -t "$target_dir"/*/BACKUP_COMPLETE | head -1`)
    ref=`\ls $ref_dir/*.exclude_list`
    echo "Relative to $ref"
    tar_newer=" --newer=$ref "
    ext="inc"
else
    echo "Making full backup"
fi

if [ ! -d "$target_drive" ]; then
    echo "ERROR: no backup drive:" $target_drive
    exit -1
fi
if [ ! -w "$target_dir" ]; then
    echo "ERROR: no backup directory, or not writable:" $target_dir
    exit -1
fi

pigz=`which pigz`
if [ $pigz == '' ]; then
    compress="-z"
else
    echo "Using parallel compression through" $pigz
    compress="--use-compress-program=pigz"
fi

backup_name=`date +%F_%H.%M.%S`"."`hostname`
backup_dir="$target_dir/$backup_name.$ext"
if [ -x "$backup_dir" ]; then
    echo "ERROR: backup dir exists:" $backup_dir
    exit -1
fi
mkdir "$backup_dir"
if [ ! -d "$backup_dir" ]; then
    echo "ERROR: could not create backup dir:" $backup_dir
    exit -1
fi

echo "Starting backup to" $backup_dir
\df -h --output=target,size,used,avail,pcent "$target_drive"

backup_file="$backup_dir"/files.tar.gz
excl_file="$backup_dir"/$backup_name.exclude_list
log_file="$backup_dir"/$backup_name.log
err_file="$backup_dir"/$backup_name.err

echo "Generating exclude list" $excl_file
cmd_excl_prune=$( for i in $exclude_prune; do echo "-ipath $i -prune"; done )
cmd_excl_dirs=$( for i in $exclude_dirs; do echo "-o -iname $i -prune"; done )
cmd_excl_files=$( for i in $exclude_files; do echo "-o -iname $i"; done )
cmd_excl_paths=$( for i in $exclude_paths; do echo "-o -ipath $i"; done )

# echo $include_dirs
# echo $cmd_excl_prune
# echo $cmd_excl_dirs
# echo $cmd_excl_files
# echo $cmd_excl_paths

find $include_dirs -xdev $cmd_excl_prune -o \
     -type d \( -false $cmd_excl_dirs \) -o \
     -type f \( -false $cmd_excl_files \) -o \
     -false $cmd_excl_paths >  "$excl_file"

ls -l "$excl_file"

echo "Starting tar backup process"
echo compress "$compress"
echo newer "$tar_newer"

tar $compress --one-file-system $tar_newer -c -v -v -f "$backup_file" \
    --exclude-from="$excl_file" \
    $include_dirs \
    2> "$err_file" 1> "$log_file"
exit_val=$?
if [ $exit_val -lt 2 ]; then 
    echo "Backup completed successfully!"
    touch "$backup_dir/BACKUP_COMPLETE"
else
    echo "Backup failed!"
    touch "$backup_dir/BACKUP_FAIL"
fi

ls -lh "$backup_dir"
\df -h --output=target,size,used,avail,pcent "$target_drive"

exit $exit_val
